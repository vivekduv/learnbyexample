<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:camel="http://camel.apache.org/schema/spring" xmlns:util="http://www.springframework.org/schema/util"
       xsi:schemaLocation="http://www.springframework.org/schema/beans      http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
    http://www.springframework.org/schema/context    http://www.springframework.org/schema/context/spring-context-3.2.xsd
    http://camel.apache.org/schema/spring            http://camel.apache.org/schema/spring/camel-spring.xsd http://www.springframework.org/schema/util https://www.springframework.org/schema/util/spring-util.xsd">


<context:annotation-config/>
    <context:component-scan base-package="org.learnbyexample.camel.routes"/>
    <context:property-placeholder location="app.properties"/>

    <camel:camelContext xmlns="http://camel.apache.org/schema/spring" id="camel">
        <contextScan />

    </camel:camelContext>
    <bean id="kafkaComponent" class="org.apache.camel.component.kafka.KafkaComponent">
        <property name="configuration"  ref="kafkaConfig"/>
    </bean>

    <bean id="kafkaConfig" class="org.apache.camel.component.kafka.KafkaConfiguration" >
        <property name="brokers" value="${spring.kafka.bootstrap-servers}"/>
        <property name="additionalProperties">
            <map>
                <entry key="acks" value="all"/>
                <entry key="retries" value="3"/>
                <entry key="batch.size" value="16384"/>
            </map>
        </property>

    </bean>




    <bean id="idempotentRepository" class="org.apache.camel.processor.idempotent.kafka.KafkaIdempotentRepository">
        <property name="topic" value="idempotent-repository-topic"/>
        <property name="bootstrapServers" value="${spring.kafka.bootstrap-servers}"/>
        <property name="maxCacheSize" value="10000000"/>
        <property name="pollDurationMs" value="30000"/>
        <property name="consumerConfig">
            <props>
                <prop key="bootstrap.servers">${spring.kafka.bootstrap-servers}</prop>


                <prop key="group.id">my-custom-idempotent-group</prop>
            <prop key="auto.offset.reset">earliest</prop>
                <prop key="enable.auto.commit">true</prop>
                <prop key="key.deserializer">org.apache.kafka.common.serialization.StringDeserializer</prop>
                <prop key="value.deserializer">org.apache.kafka.common.serialization.StringDeserializer</prop>
            </props>
        </property>





    </bean>


    <!--    <bean id="idempotentRepository" class="org.apache.camel.support.processor.idempotent.FileIdempotentRepository">-->
<!--        <property name="fileStore">-->
<!--            <bean class="java.io.File">-->
<!--                <constructor-arg value="${file.idempotent.repository}"/>-->
<!--            </bean>-->
<!--        </property>-->
<!--        <property name="maxFileStoreSize" value="10000000"/>-->
<!--        <property name="cacheSize" value="10000"/>-->
<!--    </bean>-->


</beans>